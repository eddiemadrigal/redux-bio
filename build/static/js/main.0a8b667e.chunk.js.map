{"version":3,"sources":["App.js","actions/user-action.js","actions/age-action.js","index.js","reducers/user-reducer.js","reducers/age-reducer.js"],"names":["mapActionsToProps","onUpdateUser","newUser","type","payload","user","onUpdateAge","newAge","age","connect","props","text","className","onChange","e","target","value","allReducers","combineReducers","state","allStoreEnhancers","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","dispatch","name","ReactDOM","render","aRandomProp","document","getElementById"],"mappings":"oQAiDMA,EAAoB,CACtBC,aC3CG,SAAoBC,GACzB,MAAO,CACLC,KANuB,kBAOvBC,QAAS,CACPC,KAAMH,KDwCRI,YEjDG,SAAmBC,GACxB,MAAO,CACLJ,KAJsB,iBAKtBC,QAAS,CACPI,IAAKD,MF0DIE,eA5BS,SAAC,GAEvB,MAAO,CACLJ,KAHqC,EAAfA,KAItBG,IAJqC,EAATA,OA8B9BR,EAFaS,EA1DH,SAAAC,GAUV,IAAIC,EAAO,yCAAeD,EAAML,KAArB,aAAqCK,EAAMF,IAA3C,eAEX,OACE,yBAAKI,UAAU,OACb,6BACE,oCAAS,2BAAOC,SAbtB,SAAsBC,GACpBJ,EAAMT,aAAaa,EAAEC,OAAOC,WAaxB,mCAAQ,2BAAOH,SAVrB,SAAqBC,GACnBJ,EAAMJ,YAAYQ,EAAEC,OAAOC,YAWzB,6BACGL,O,OGPT,IAAMM,EAAcC,YAAgB,CAClCb,KCba,WAAiD,IAA5Bc,EAA2B,uDAArB,GAAqB,yCAAhBhB,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,QACnD,OAAQD,GACN,IHLuB,kBGOvB,IHNsB,iBGQtB,IHPwB,mBGQtB,OAAOC,EAAQC,KACjB,QACE,OAAOc,IDKXX,IElBa,WAAiD,IAA5BW,EAA2B,uDAArB,GAAqB,yCAAhBhB,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,QACnD,OAAQD,GACN,IHJsB,iBGKpB,OAAOC,EAAQI,IACjB,QACE,OAAOW,MFkBPC,EAAoBC,YACxBC,YAAgBC,KAChBC,OAAOC,8BAAgCD,OAAOC,gCAK1CC,EAAQC,YACZV,EACA,CACEZ,KAAM,GACNG,IAAK,GAEPY,GAyBFM,EAAME,SAhBmB,CACvBzB,KAAM,aACNC,QAAS,CACPyB,KAAM,oBAcVH,EAAME,SAVkB,CACtBzB,KAAM,YACNC,QAAS,CACPI,IAAK,MAeTsB,IAASC,OACL,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,CAAKM,YAAc,SAEvBC,SAASC,eAAe,W","file":"static/js/main.0a8b667e.chunk.js","sourcesContent":["import React from 'react';  \nimport { connect } from 'react-redux'\nimport { updateUser } from './actions/user-action';\nimport { updateAge } from './actions/age-action';\nimport './App.css';\n\nconst App = props => {\n\n  function onUpdateUser(e) {\n    props.onUpdateUser(e.target.value);\n  }\n\n  function onUpdateAge(e) {\n    props.onUpdateAge(e.target.value);\n  }\n\n  let text = <p>My name is {props.user} and I am {props.age} years old.</p>\n\n  return (\n    <div className=\"App\">\n      <div>\n        <p>Name: <input onChange={onUpdateUser} /></p>\n        <p>Age: <input onChange={onUpdateAge} /></p>\n      </div>\n      <div>\n        {text}        \n      </div>\n    </div>\n  );\n}\n\n// mapStateToProps receives the state of the store\n// and then decide what props to use in a component\n// props automatically gets data from state\n// state.products & state.user => destructure to ({products, user})\n\nconst mapStateToProps = ({user, age}) => {\n  // console.log(props);\n  return {\n    user,\n    age\n  }\n  \n};\n\n// mapActionsToProps allows actions to be dispatched from components easily\n// no dispatch in the components themselves is required\n// functions will automatically dispatch actions to the store\n\nconst mapActionsToProps = {\n    onUpdateUser: updateUser,\n    onUpdateAge: updateAge\n};\n\n// merge props\n// propsFromState => whatever we return from maptStateToProps\n// propsFromDispatch => what we return from mapActionsToProps\n// ownProps => the passed in props\n\n// const mergeProps = (propsFromState, propsFromDispatch, ownProps) => {\n//   console.log(propsFromState, propsFromDispatch, ownProps);\n//   return {}\n// }\n\nexport default connect(\n  mapStateToProps, \n  mapActionsToProps\n  )(App);\n","// to use in reducer\n// scopes the action type to avoid collisions with other components\n\nexport const UPDATE_USER = 'user:updateUser';\nexport const SHOW_ERROR = 'user:showError';\nexport const SHOW_SUCCESS = 'user:showSuccess';\n\nexport function updateUser(newUser) {\n  return {\n    type: UPDATE_USER,\n    payload: {\n      user: newUser\n    }\n  }\n}\n\nexport function showError() {\n  return {\n    type: SHOW_ERROR,\n    payload: {\n      user: 'ERROR!!'\n    }\n  }\n}\n\nexport function showSuccess() {\n  return {\n    type: SHOW_SUCCESS,\n    payload: {\n      user: 'SUCCESS!!'\n    }\n  }\n}","export const UPDATE_AGE = 'user:updateAge';\n\nexport function updateAge(newAge) {\n  return {\n    type: UPDATE_AGE,\n    payload: {\n      age: newAge\n    }\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\n\n// add thunk middleware to store enhanceers\n\nimport thunk from 'redux-thunk';\n\n// reducer functions\n\nimport ageReducer from './reducers/age-reducer';\nimport userReducer from './reducers/user-reducer';\n\n// combine reducer functions\n\nconst allReducers = combineReducers({\n  user: userReducer,\n  age: ageReducer\n})\n\n// apply redux-thunk\n\nconst allStoreEnhancers = compose(\n  applyMiddleware(thunk),\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\n// create and initialize the store\n\nconst store = createStore(\n  allReducers, \n  {\n    user: '',\n    age: 0\n  },\n  allStoreEnhancers\n);\n\n// view initial state of app\n\n// console.log('initial state: ', store.getState());\n\n// update store\n\nconst updateUserAction = {\n  type: 'updateUser',\n  payload: {\n    name: 'Erika Madrigal'\n  }\n}\n\nconst updateAgeAction = {\n  type: 'updateAge',\n  payload: {\n    age: 40\n  }\n}\n\n// dispatch actions\n\nstore.dispatch(updateUserAction);\nstore.dispatch(updateAgeAction);\n\n// view updated state of app\n\n// console.log('updated state: ', store.getState());\n\n// output\n\nReactDOM.render(\n    <Provider store={store}>\n      <App aRandomProp = \"123\" />\n    </Provider>,\n  document.getElementById('root')\n);\n","// handle the user-action.js\n\n\n\nimport { UPDATE_USER, SHOW_ERROR, SHOW_SUCCESS } from '../actions/user-action';\n\nexport default function userReducer(state='', {type, payload}) {\n  switch (type) {\n    case UPDATE_USER:\n      return payload.user;\n    case SHOW_ERROR:\n      return payload.user;\n    case SHOW_SUCCESS:\n      return payload.user;\n    default:\n      return state;\n  }\n}","import { UPDATE_AGE } from '../actions/age-action';\n\nexport default function userReducer(state='', {type, payload}) {\n  switch (type) {\n    case UPDATE_AGE:\n      return payload.age;\n    default:\n      return state;\n  }\n}"],"sourceRoot":""}